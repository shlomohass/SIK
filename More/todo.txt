SIK todo list:
********************************************************************************************
[X] Lexer -> basic skelaton;
[X] Lang -> Import Lang helper;
[X] Tokenizer -> basic skelaton;
[X] Script load file parser -> add load file and basic parse statements;
[X] Handle comments;
[X] Generate tokens with types and priority
[X] Handle negative numbers and dot prefix of number;
[ ] Build Basic Precompiler -> Macros, Extenders, Includes.
[X] Parse Types boolean.
[X] Build Basic AST from token collection.
[X] Build Test Engine.
[X] Exception Class handlers.
[X] Bulk AST support for complex parsing.
[X] Variable declaration lookahead for nested.
[X] OBJECT Handler in Parser basic skelaton with nested objects.
[X] AND OR -> early stop support.
[X] FOR Loop handler in parser.
[X] INC DEC operations -> support also primitive numbers.
[X] Scoping engine to force block scope.
[X] WHILE loop.
[X] IF, ELSEIF, ELSE statement.
[X] EACH loop.
[X] Improved negative number handler. <- handle check for space before negativity.
[X] Object Instruction debuger output print.
[ ] DEFER keyword for blocks.
[X] Functions base parser and Ast generator.
[X] RETRUN keyword decleration.
[X] PRINT keyword -> primitive withe comma support.
[X] BREAK keyword.
[X] BREAKIF keyword.
[X] CONTINUE keyword.
[ ] SWITCH  keyword.
[ ] SKIP key word in loops -> for loop, each loop. jump iterations.
[ ] ADD Pointers.
[X] Object Traverse in parser.
[X] Function Call in Parser.
[ ] .. ?: ..
[ ] .. ? .. : .. 
[ ] .. !: .. -> if not set or NaN
[ ] ! .. 
[X] ARRAYS parser.
[X] Array travers with multidim support.
[X] Array quick push support.
[X] Nested Arrays suppord multi dim.
[X] Easy hard codded array helpers -> the travers name + num of elements. 
[ ] ENUMS.
[ ] UNSET keyword for variables.
[ ] NAMING Map for compile check -> seen + declared.
[ ] GET Keyword -> For user input
[ ] SLEEP Keyword -> stop program
[ ] PAUSE Keyword -> Pause until Enter.
[ ] EXIT Keyword -> Exit Program with Integer code.
[X] code Analayzer -> auto set in jumps.
[X] code Analayzer -> auto set in blocks + check.
[ ] chunks - quick page chunks methods.
[X] Add Run time to exception class.
[X] Base VM
[X] Vm Data structure.
[X] Vm -> Push.
[X] Vm -> Variable Declaration.
[X] Vm -> Scopes with nested scopes support.
[X] Vm -> Addition.
[X] Vm -> Subraction.
[X] Vm -> Multiplication.
[X] Vm -> Assign.
[X] Vm -> Added Inc and Dec
[X] Vm -> Added CAND and COR with early jump support.
[X] Vm -> Added CGRT CLST support.
[X] Vm -> Added Array create + container.
[X] Vm -> Added Array traverse + nested.
[X] Vm -> Added Array element set + nested traverse support.
[X] Function In object interaction + nested functions in object and object in functions.
[X] Improve Function naming for later collision check.
[X] Add Code Ana for Function blocks.
[ ] Validate dual function declaration. 
[ ] Support for obj(1)[1, 3]; And obj(1).test;
[X] Vm -> Added Function declaration and object assigning to Vm
[X] Vm -> Added Function execution to Vm with scoping and variable pass.
[X] Vm -> Support for dynamic arguments pass to functions; 
[X] Vm -> Execution of anon funct ??? without var -> precendence for localy set variable.
[X] Vm -> Execution of recursive functions.
[X] Vm -> For loop execution with proper scoping and nesting support.
[X] Vm -> For loop execution with shorhand type (without call part).  
[X] Vm -> While loop execution with proper scoping and nesting support.
[ ] Vm -> Each loop execution with proper scoping and nesting support.
[ ] Vm -> Test and implementation of mix loop nested.
[ ] Port the FOR loop from usage of , to ; must change when the precompiler cuts the statement.
[ ] Handle how numbers are printed to screen such as e+06 and decimal point etc.
[ ] Scope FOR and WHILE option.
[X] Vm -> Object Execution.
[X] Vm -> Object fast traverse objects with short traversal.
[X] Vm -> Object With nested arrays.
[X] Vm -> Object assigning.
[X] Vm -> Object With nested private functions.
[ ] Vm -> Object add childs.


/******************************************************
 * Some High Optimized to include in the Lib:
 ******************************************************/

 /* Power a double: */
double intpowlog(double x, unsigned int e)
{
        if (e == 0) return 1.0;
        if (e % 2 == 0)
        {
                double h = intpowlog(x, e / 2);
                return h * h;
        }
        else
        {
                double h = intpowlog(x, e / 2);
                return h * h * x;
        }
}

Bench:

<?php
/*
##########################################################################
#                      PHP Benchmark Performance Script                  #
#                         © 2010 Code24 BV                               # 
#                                                                        #
#  Author      : Alessandro Torrisi                                      #
#  Company     : Code24 BV, The Netherlands                              #
#  Date        : July 31, 2010                                           #
#  version     : 1.0                                                     #
#  License     : Creative Commons CC-BY license                          #
#  Website     : http://www.php-benchmark-script.com                     #	
#                                                                        #
##########################################################################
*/

	function test_Math($count = 140000) {
		$time_start = microtime(true);
		$mathFunctions = array("abs", "acos", "asin", "atan", "bindec", "floor", "exp", "sin", "tan", "pi", "is_finite", "is_nan", "sqrt");
		foreach ($mathFunctions as $key => $function) {
			if (!function_exists($function)) unset($mathFunctions[$key]);
		}
		for ($i=0; $i < $count; $i++) {
			foreach ($mathFunctions as $function) {
				$r = call_user_func_array($function, array($i));
			}
		}
		return number_format(microtime(true) - $time_start, 3);
	}
	
	
	function test_StringManipulation($count = 130000) {
		$time_start = microtime(true);
		$stringFunctions = array("addslashes", "chunk_split", "metaphone", "strip_tags", "md5", "sha1", "strtoupper", "strtolower", "strrev", "strlen", "soundex", "ord");
		foreach ($stringFunctions as $key => $function) {
			if (!function_exists($function)) unset($stringFunctions[$key]);
		}
		$string = "the quick brown fox jumps over the lazy dog";
		for ($i=0; $i < $count; $i++) {
			foreach ($stringFunctions as $function) {
				$r = call_user_func_array($function, array($string));
			}
		}
		return number_format(microtime(true) - $time_start, 3);
	}


	function test_Loops($count = 19000000) {
		$time_start = microtime(true);
		for($i = 0; $i < $count; ++$i);
		$i = 0; while($i < $count) ++$i;
		return number_format(microtime(true) - $time_start, 3);
	}

	
	function test_IfElse($count = 9000000) {
		$time_start = microtime(true);
		for ($i=0; $i < $count; $i++) {
			if ($i == -1) {
			} elseif ($i == -2) {
			} else if ($i == -3) {
			}
		}
		return number_format(microtime(true) - $time_start, 3);
	}	
	
	
	$total = 0;
	$functions = get_defined_functions();
	$line = str_pad("-",38,"-");
	echo "<pre>$line\n|".str_pad("PHP BENCHMARK SCRIPT",36," ",STR_PAD_BOTH)."|\n$line\nStart : ".date("Y-m-d H:i:s")."\nServer : {$_SERVER['SERVER_NAME']}@{$_SERVER['SERVER_ADDR']}\nPHP version : ".PHP_VERSION."\nPlatform : ".PHP_OS. "\n$line\n";
	foreach ($functions['user'] as $user) {
		if (preg_match('/^test_/', $user)) {
			$total += $result = $user();
            echo str_pad($user, 25) . " : " . $result ." sec.\n";
        }
	}
	echo str_pad("-", 38, "-") . "\n" . str_pad("Total time:", 25) . " : " . $total ." sec.</pre>";
	
?>